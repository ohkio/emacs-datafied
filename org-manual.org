
* Manual
** Introduction
*** Summary
*** Installation
*** Activation
*** Feedback
Instructions for helpful backtrace:
 1. Reload uncompiled version of all Org mode Lisp files.
    - C-u M-x org-reload <RET>
 2. Activate the Debugger
    - M-x toggle-debug-on-error <RET>
 3. Reproduce error (document each step you take)
 4. Save \*Backtrace* buffer to a file and attach to bug report
    - C-x C-w (example)
*** Conventions
** Document Structure
*** Headlines
There are options to reduce visual noise of the stars in headlines

There are options to have headlines dynamically numbered
*** Visibility Cycling
**** Global and local cycling
**** Initial visibility
**** Catching invisible edits
*** Motion
*** Structure Editing
Skipping ~org-refile~ since it seems like the details will be more
relevant later.
*** Sparse Trees
The main sparse tree command ~org-occur~ searches an org document
using regular expressions. The other sparse tree commands select
headings based on TODO keywords, tags, or properties and are discussed
later in this manual.

To print a sparse tree, you can use the Emacs command
~ps-print-buffer-with-faces~ which does not print invisible parts of
the document. Or you can use the command ~C-c C-e C-v~ to export only
the visible part of the document and print the resulting file.
*** Plain Lists
Org supports plain lists by tuning filling and wrapping commands to
deal with them correctly, and by exporting them properly. Since
indentation is what governs the structure of these lists, many
structural constructs like ~#+BEGIN_~ blocks can be indented to signal
that they belong to a particular item.

When using ~*~ as a bullet, lines must be indented so that they are
not interrupted as headlines. Also, when you are hiding leading stars
to get a clean outline view, plain list items starting with a star may
be hard to distinguish from true headlines. In short: even though ~*~
is supported, it may be better to not use it for plain list items.

If there's a checkbox in the item, the counter cookies must be put
_before_ the checkbox. If you have activated alphabetical lists, you
can also use counters like ~[@b]~.
* Vocabulary
** Introduction
*** Agenda View
A view that can pull together specific entries in queries to create a
dynamic view that also integrates the Emacs calendar and diary.
*** TODO Keyword
A syntactical element
*** Tag
A syntactical element
*** Property
A syntactical element
*** Keyword
A syntactical element
*** Block
A syntactical element
** Document Structure
*** Headlines
<<<Headline>>> define the structure of an outline tree. Org headlines
start on the left margin with one or more stars followed by a space.
*** Subtree Cycling
Rotating the current subtree among the relevant states:
 1. Folded
 2. Children
 3. Subtree
*** Global Cycling
Rotating the entire buffer of headlines among the following states:
 1. Overview
 2. Contents
 3. Show All
*** Sparse Trees
An important feature of Org mode is the ability to construct a
<<<Sparse Tree>>> for selected information in an outline tree, so that
the entire document is folded as much as possible, but the selected
information is made visible along with theheadline structure above it.
*** Plain Lists
Within an entry of the outline tree, a hand-formatted <<<plain list>>>
can provide additional structure. They also provide a way to create
lists of checkboxes. Org supports editing such lists, and every
exporter can parse and format them.

Org knows ordered lists, unordered lists and description lists.

Items belonging to the same list must have the same indentation on the
first line. In particular, if an ordered list reaches number ~10.~,
then the 2 digit number must be written left-aligned with the other
numbers in the list. An item ends before the next line that is less or
equally indented than its bullet/number.

A list ends whenever every item has ended, which means before any line
less or equally indented than items at top level. It also ends before
two blank lines. In that case, all items are closed.
* Syntax
** Introduction
*** TODO Keywords
~TODO~
~WAITING~

TODO Keywords are written with all capitals, even if they are
user-defined.
*** Tags
~boss~
~ARCHIVE~

Tags are case-sensitive. User-defined tags are usually written in
lowercase; built-in tags with special meaning are written as they
should appear in the document, usually with all capitals.
*** Properties
~Release~
~PRIORITY~

User-defined properties are capitalized; built-in properties with
special meaning are written with all capitals.
*** Keywords and Blocks
~TITLE~
~BEGIN~ ... ~END~

Keywords and blocks are written in uppercase to enhance their
readability, but you can use lowercase in your Org files.
** Document Structure
*** Headlines
#+BEGIN_SRC org
  ,* Top level headline
  ,** Second level
  ,*** Third level
  ,some text
  ,*** Third level
  ,more text
  ,* Another top level headline
#+END_SRC

*** Unordered List
#+BEGIN_SRC org
  - Example Item 1
  - Example Item 2

  + Other unordered start 1
  + Other unordered start 2

  * Another unordered list 1
  * Another unordered list 2
#+END_SRC

*** Ordered List
#+BEGIN_SRC org
  1. Ordered List Item 1
  2. Ordered List Item 2
  3. Ordered List Item 3

  1) Other Format Item 1
  2) Other Format Item 2

  1. [@20] This item will start at 20
  2. And so this item will number with 21
#+END_SRC

*** Description List
#+BEGIN_SRC org
  - Example :: this is an example of how maybe defining a vocab word
    might look in a description list
  - Triangle :: A 2d shape with 3 straight sides
#+END_SRC

* Subject
** Introduction
*** Bug Report
Anything relating to creating a bug report of an org mode session.
*** Org-Buffer
Relating to a buffer that has org-mode turned on.
** Document Structure
*** Headline
Relating to a headline in org-mode
*** Subtree
Anything relating to a headline and all sub headlines branching from
it.
*** Org-Text
Anything relating to any and all text in an Org-Mode enabled buffer.
*** Org-Goto
Anything relating to the command, context, and theoretical mode that
is started when you use the command ~org-goto~
*** Sparse-Tree
Anything related to the creation, navigation and general information
about a Sparse Tree
*** List-Like
Anything relating to all the features that are list like so headings,
plain lists, or tables
*** Todo
Anything relating to the Todo feature that you can use with
headlines.
*** Plain-List
Anything relating to a plain list
* File Additions
** Introduction
*** Force org mode in Emacs
To turn on Org mode in a file that does not have the extension
'~.org~', make the first line of a file look like this:
#+BEGIN_SRC org
  #    -*- mode: org -*-
#+END_SRC

Which selects Org mode for this buffer no matter what the file's name
is.
** Document Structure
*** Initial Visibility
You can define what the initial global visibility should be for an Org
Buffer on a per-file basis by adding one of the following lines
anywhere in the buffer. Please note all of these start with ~#+~.
#+BEGIN_SRC org
  STARTUP: overview
  STARTUP: content
  STARTUP: showall
  STARTUP: show2levels
  STARTUP: show3levels
  STARTUP: show4levels
  STARTUP: show5levels
  STARTUP: showeverything
#+END_SRC

* Modes
* Contexts
** Introduction
*** org-buffer
Indicates commands that work anywhere inside of a buffer where org
mode is turned on.
** Document Structure
*** headline
Any command that only works if point is currently on an org headline.
*** not-table
Any command that is valid anywhere in an org buffer except if it is in
a table.
*** not-list
Any command that is valid anywhere in an org buffer except if it is in
a list
*** sparse-tree
Any command that is valid only after a command that creates a sparse
tree.
*** agenda
Any command that is valid in a buffer displaying an agenda-view
(unsure of exact mode name yet)
*** subtree
Any command that is executed within a subtree in an Org Buffer. This
should be most places in an Org Buffer except for the very top of a
file before the first headline.
*** org-goto
Any command that is executed after the ~org-goto~ command
*** empty-headline
Any command that is executed on a headline that currently only has the
asterisks without any text for the headline.
*** plain-list
Any command that act on items when point is in the first line of an
item-the line with the bullet or number.
* Commands
** Introduction
*** org-submit-bug-report                                            :inform:
:PROPERTIES:
:Subject:  Bug Report
:Context:  org-buffer
:Description: Puts relevant version information into mail buffer
:Importance: 3
:END:
 - Subject :: Bug Report
 - Function :: inform
 - Context :: org-buffer
 - Description :: Puts relevant version information into mail buffer
 - Importance :: 3
*** org-reload                                                        :start:
:PROPERTIES:
:Subject:  Org-Buffer
:Context:  org-buffer
:Description: Reload all Org Lisp files
:Argument: prefix
:Importance: 3
:END:
 - Subject :: Org-Buffer
 - Function :: start
 - Context :: org-buffer
 - Description :: Reload all Org Lisp files
 - Argument :: plain
 - Importance :: 3
** Document Structure
*** org-cycle                                                         :style:
:PROPERTIES:
:Binding:  <TAB>
:Subject:  Headline
:Context:  headline
:Description: Cycle through headline visibility options
:Importance: 1
:END:
 - Binding :: <TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: headline
 - Description :: Cycle through headline visibility options
 - Importance :: 1
*** org-global-cycle                                                  :style:
:PROPERTIES:
:Binding:  S-<TAB>
:Subject:  Headline
:Context:  not-table
:Description: Rotate the entire buffer among the global states
:Importance: 2
:END:
 - Binding :: S-<TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: not-table
 - Description :: Rotate the entire buffer among the global states
 - Importance :: 2
 - Argument :: numeric

When called with a numeric prefix argument N, view contents only up to
headlines of level N.
*** org-global-cycle                                                  :style:
:PROPERTIES:
:Binding:  C-u <TAB>
:Subject:  Headline
:Context:  headline
:Description: Rotate the entire buffer among the global states
:Importance: 3
:END:
 - Binding :: C-u <TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: not-list
 - Description :: Rotate the entire buffer among the global states
 - Importance :: 3
*** org-set-startup-visibility                                        :style:
:PROPERTIES:
:Binding:  C-u C-u <TAB>
:Subject:  Headline
:Context:  org-buffer
:Description: Switch back to the startup visibility of the buffer
:Importance: 2
:END:
 - Binding :: C-u C-u <TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: org-buffer
 - Description :: Switch back to the startup visibility of the buffer
 - Importance :: 2
*** outline-show-all                                                  :style:
:PROPERTIES:
:Binding:  C-u C-u C-u <TAB>
:Subject:  Headline
:Context:  org-buffer
:Description: Show all, including drawers
:Importance: 4
:END:
 - Binding :: C-u C-u C-u <TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: org-buffer
 - Description :: Show all, including drawers
 - Importance :: 4
*** org-reveal                                                       :inform:
:PROPERTIES:
:Binding:  C-c C-r
:Subject:  Subtree
:Context:  sparse-tree
:Description: Reveal subtree of headline in sparse tree
:Importance: 4
:END:
 - Binding :: C-c C-r
 - Subject :: Headline
 - Function :: inform
 - Context :: sparse-tree
 - Description :: Reveal hierarchy of headline in sparse tree
 - Importance :: 4

Reveal context around point, showing the current entry, the following
headline and the hierarchy above.
*** org-reveal                                                       :inform:
:PROPERTIES:
:Binding:  C-c C-r
:Subject:  Subtree
:Context:  sparse-tree
:Description: Reveal subtree of headline in sparse tree
:Importance: 4
:END:
 - Binding :: C-c C-r
 - Subject :: Headline
 - Function :: inform
 - Context :: agenda
 - Description :: Reveal tree path of headline in sparse tree
 - Importance :: 4

Reveal context around point, showing the current entry, the following
headline and the hierarchy above.
*** outline-show-branches                                            :inform:
:PROPERTIES:
:Binding:  C-c C-k
:Subject:  Subtree
:Context:  headline
:Description: Expose all the headlines of the subtree, not body
:Importance: 3
:END:
 - Binding :: C-c C-k
 - Subject :: Subtree
 - Function :: inform
 - Context :: subtree
 - Description :: Expose all the headlines of the subtree, not body
 - Importance :: 3
*** outline-show-children                                            :inform:
:PROPERTIES:
:Binding:  C-c <TAB>
:Subject:  Subtree
:Context:  subtree
:Description: Expose all direct chilren of the subtree
:Importance: 3
:Argument: numeric
:END:
 - Binding :: C-c <TAB>
 - Subject :: Subtree
 - Function :: inform
 - Context :: subtree
 - Description :: Expose all direct chilren of the subtree
 - Importance :: 3
 - Argument :: numeric

With a numeric prefix argument N, expose all children down to level
N.
*** org-tree-to-indirect-buffer                           :inform:edit:style:
:PROPERTIES:
:Binding:  C-c C-x b
:Subject:  Subtree
:Context:  subtree
:Description: Show the current subtree in an indirect buffer
:Importance: 5
:Argument: numeric, plain
:END:
 - Binding :: C-c C-x b
 - Subject :: Subtree
 - Function :: inform:edit:style:
 - Context :: subtree
 - Description :: Show the current subtree in an indirect buffer
 - Importance :: 5
 - Argument :: numeric, plain

With a numeric prefix argument N, go up to level N and then take that
tree. If N is negative then go up that many levels. With a plain
argument, do not remove the previously used indirect buffer.
*** org-copy-visible                                               :remember:
:PROPERTIES:
:Binding:  C-c C-x v
:Subject:  Org-Text
:Context:  region
:Description: Copy the _visible_ text in region into kill ring
:Importance: 2
:END:
 - Binding :: C-c C-x v
 - Subject :: Org-Text
 - Function :: remember
 - Context :: region
 - Description :: Copy the _visible_ text in region into kill ring
 - Importance :: 2
*** org-set-startup-visibility                                        :style:
:PROPERTIES:
:Binding:  C-u C-u <TAB>
:Subject:  Headline
:Context:  org-buffer
:Description: Switch back to startup visibility of org buffer
:Importance: 2
:END:
 - Binding :: C-u C-u <TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: org-buffer
 - Description :: Switch back to startup visibility of org buffer
 - Importance :: 2
*** org-next-visible-heading                                            :nav:
:PROPERTIES:
:Binding:  C-c C-n
:Subject:  Headline
:Context:  org-buffer
:Description: Next headline
:Importance: 1
:END:
 - Binding :: C-c C-n
 - Subject :: Headline
 - Function :: nav
 - Context :: org-buffer
 - Description :: Next headline
 - Importance :: 1
*** org-previous-visible-heading                                        :nav:
:PROPERTIES:
:Binding:  C-c C-p
:Subject:  Headline
:Context:  org-buffer
:Description: Previous headline
:Importance: 1
:END:
 - Binding :: C-c C-p
 - Subject :: Headline
 - Function :: nav
 - Context :: org-buffer
 - Description :: Previous headline
 - Importance :: 1
*** org-forward-heading-same-level                                      :nav:
:PROPERTIES:
:Binding:  C-c C-f
:Subject:  Headline
:Context:  org-buffer
:Description: Next headline same level
:Importance: 1
:END:
 - Binding :: C-c C-f
 - Subject :: Headline
 - Function :: nav
 - Context :: org-buffer
 - Description :: Next headline same level
 - Importance :: 1
*** org-backward-heading-same-level                                     :nav:
:PROPERTIES:
:Binding:  C-c C-b
:Subject:  Headline
:Context:  org-buffer
:Description: Previous headline same level
:Importance: 1
:END:
 - Binding :: C-c C-b
 - Subject :: Headline
 - Function :: nav
 - Context :: org-buffer
 - Description :: Previous headline same level
 - Importance :: 1
*** outline-up-heading                                                  :nav:
:PROPERTIES:
:Binding:  C-c C-u
:Subject:  Headline
:Context:  org-buffer
:Description: Backward to higher level headline
:Importance: 1
:END:
 - Binding :: C-c C-u
 - Subject :: Headline
 - Function :: nav
 - Context :: org-buffer
 - Description :: Backward to higher level headline
 - Importance :: 1
*** org-goto                                                          :start:
:PROPERTIES:
:Binding:  C-c C-j
:Subject:  Org-Goto
:Context:  org-buffer
:Description: Jump without changing current outline visibility
:Importance: 3
:END:
 - Binding :: C-c C-j
 - Subject :: Org-Goto
 - Function :: start
 - Context :: org-buffer
 - Description :: Jump without changing current outline visibility
 - Importance :: 3

After command, if variable ~org-goto-auto-isearch~ is turned on
(default) then typing any visible character will start an isearch in
the file for where to go
*** OG Cycle Visibility                                               :style:
:PROPERTIES:
:Binding:  <TAB>
:Subject:  Headline
:Context:  org-goto
:Description: Cycle visibility
:Importance: 3
:END:
 - Binding :: <TAB>
 - Subject :: Headline
 - Function :: style
 - Context :: org-goto
 - Description :: Cycle visibility
 - Importance :: 3
*** OG Next Visible Headline                                            :nav:
:PROPERTIES:
:Binding:  <DOWN>
:Subject:  Headling
:Context:  org-goto
:Description: Next visible headline
:Importance: 3
:END:
 - Binding :: <DOWN>
 - Subject :: Headling
 - Function :: nav
 - Context :: org-goto
 - Description :: Next visible headline
 - Importance :: 3
*** OG Prev Visible Headline                                            :nav:
:PROPERTIES:
:Binding:  <UP>
:Subject:  Headline
:Context:  org-goto
:Description: Previous visible headline
:Importance: 3
:END:
 - Binding :: <UP>
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: Previous visible headline
 - Importance :: 3
*** OG Select Location                                                  :nav:
:PROPERTIES:
:Binding:  <RET>
:Subject:  Headline
:Context:  org-goto
:Description: Select this location
:Importance: 3
:END:
 - Binding :: <RET>
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: Select this location
 - Importance :: 3
*** OG Sparse Tree                                                    :start:
:PROPERTIES:
:Binding:  /
:Subject:  Sparse-Tree
:Context:  org-goto
:Description: Do a Sparse-tree search
:Importance: 4
:END:
 - Binding :: /
 - Subject :: Sparse-Tree
 - Function :: start
 - Context :: org-goto
 - Description :: Do a Sparse-tree search
 - Importance :: 4
*** OG Next Visible Headline                                            :nav:
:PROPERTIES:
:Binding:  n
:Subject:  Headline
:Context:  org-goto
:Description: Next visible headline
:Importance: 4
:END:
 - Binding :: n
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: Next visible headline
 - Importance :: 4

Works if you turn off variable ~org-goto-auto-isearch~
*** OG Prev Visible Headline                                            :nav:
:PROPERTIES:
:Binding:  p
:Subject:  Headline
:Context:  org-goto
:Description: Previous visible headline
:Importance: 4
:END:
 - Binding :: p
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: Previous visible headline
 - Importance :: 4

Works if you turn off variable ~org-goto-auto-isearch~
*** OG Next Headline Same                                               :nav:
:PROPERTIES:
:Binding:  f
:Subject:  Headline
:Context:  org-goto
:Description: Next headline same level
:Importance: 4
:END:
 - Binding :: f
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: Next headline same level
 - Importance :: 4

Works if you turn off variable ~org-goto-auto-isearch~
*** OG Prev Headline Same                                               :nav:
:PROPERTIES:
:Binding:  b
:Subject:  Headline
:Context:  org-goto
:Description: Previous headline same level
:Importance: 4
:END:
 - Binding :: b
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: Previous headline same level
 - Importance :: 4

Works if you turn off variable ~org-goto-auto-isearch~
*** OG Headline Up                                                      :nav:
:PROPERTIES:
:Binding:  u
:Subject:  Headline
:Context:  org-goto
:Description: One level up
:Importance: 4
:END:
 - Binding :: u
 - Subject :: Headline
 - Function :: nav
 - Context :: org-goto
 - Description :: One level up
 - Importance :: 4

Works if you turn off variable ~org-goto-auto-isearch~
*** OG Digit                                                          :style:
:PROPERTIES:
:Binding:  0 <THRU> 9
:Subject:  Command
:Context:  org-goto
:Description: Digit argument
:Importance: 5
:END:
 - Binding :: 0 <THRU> 9
 - Subject :: Command
 - Function :: style
 - Context :: org-goto
 - Description :: Digit argument
 - Importance :: 5

Works if you turn off variable ~org-goto-auto-isearch~
*** OG Quit                                                            :stop:
:PROPERTIES:
:Binding:  q
:Subject:  Org-Goto
:Context:  org-goto
:Description: quit
:Importance: 3
:END:
 - Binding :: q
 - Subject :: Org-Goto
 - Function :: stop
 - Context :: org-goto
 - Description :: quit
 - Importance :: 3

Works if you turn off variable ~org-goto-auto-isearch~
*** org-meta-return                                                     :add:
:PROPERTIES:
:Binding:  M-<RET>
:Subject:  List-Like
:Context:  org-buffer
:Description: Insert a new headline, item or row
:Importance: 1
:Argument: plain, double
:END:
 - Binding :: M-<RET>
 - Subject :: List-Like
 - Function :: add
 - Context :: org-buffer
 - Description :: Insert a new headline, item or row
 - Importance :: 1
 - Argument :: plain, double

If the command is used at the _beginning_ of a line, and if there is a
headline or a plain list item at point, the new headline/item is created
_before_ the current line. When used at the beginning of a regular
line of text, turn that line into a headline.

When this command is used in the middle of a line, the line is split
and the rest of the line becomes the new item or headline. If you do
not want the line to be split, customize ~org-M-RET-may-split-line~

Calling the command with a plain prefix unconditionally inserts a new
headline at the end of the current subtree, thus preserving its
contents. With a double prefix, the new headline is created at the end
of the parent subtree instead.
*** org-insert-heading-respect-content                                  :add:
:PROPERTIES:
:Binding:  C-<RET>
:Subject:  Headline
:Context:  org-buffer
:Description: Insert a new headline at end of current subtree
:Importance: 1
:END:
 - Binding :: C-<RET>
 - Subject :: Headline
 - Function :: add
 - Context :: org-buffer
 - Description :: Insert a new headline at end of current subtree
 - Importance :: 1
*** org-insert-todo-heading                                             :add:
:PROPERTIES:
:Binding:  M-S-<RET>
:Subject:  Todo
:Context:  org-buffer
:Description: Insert new TODO entry at same current level
:Importance: 3
:END:
 - Binding :: M-S-<RET>
 - Subject :: Todo
 - Function :: add
 - Context :: org-buffer
 - Description :: Insert new TODO entry at same current level
 - Importance :: 3

See also the variable ~org-treat-insert-todo-heading-as-state-change~
*** org-insert-todo-heading-respect-content                             :add:
:PROPERTIES:
:Binding:  C-S-<RET>
:Subject:  Todo
:Context:  org-buffer
:Description: Insert new Todo with same as current level
:Importance: 3
:END:
 - Binding :: C-S-<RET>
 - Subject :: Todo
 - Function :: add
 - Context :: org-buffer
 - Description :: Insert new Todo with same as current level
 - Importance :: 3
*** org-cycle                                                          :edit:
:PROPERTIES:
:Binding:  <TAB>
:Subject:  Headline
:Context:  empty-headline
:Description: When empty, change headline level
:Importance: 1
:END:
 - Binding :: <TAB>
 - Subject :: Headline
 - Function :: edit
 - Context :: empty-headline
 - Description :: When empty, change headline level
 - Importance :: 1

In a new entry with no text yet, the first ~<TAB>~ demotes the entry
to become a child of the previous one. The next ~<TAB>~ makes it a
parent, and so on, all the way to top level. Yet another ~<TAB>~, and
you are back to the initial level.
*** org-do-promote                                                :edit:move:
:PROPERTIES:
:Binding:  M-<LEFT>
:Subject:  Headline
:Context:  not-table
:Description: Promote current heading by one level
:Importance: 1
:END:
 - Binding :: M-<LEFT>
 - Subject :: Headline
 - Function :: edit:move
 - Context :: headline
 - Description :: Promote current heading by one level
 - Importance :: 1

When there is an active region-i.e., when Transient Mark mode is
active-promotion and demotion work on all headlines in the region. To
select a region of headlines, it is best to place both point and mark
at the beginning of a line, mark at the beginning of the first
headline, and point at the line just after the last headline to change
*** org-do-demote                                                 :edit:move:
:PROPERTIES:
:Binding:  M-<RIGHT>
:Subject:  Headline
:Context:  headline
:Description: Demote current headling by one level
:Importance: 1
:END:
 - Binding :: M-<RIGHT>
 - Subject :: Headline
 - Function :: edit:move
 - Context :: headline
 - Description :: Demote current headling by one level
 - Importance :: 1

When there is an active region-i.e., when Transient Mark mode is
active-promotion and demotion work on all headlines in the region. To
select a region of headlines, it is best to place both point and mark
at the beginning of a line, mark at the beginning of the first
headline, and point at the line just after the last headline to change
*** org-promote-subtree                                           :edit:move:
:PROPERTIES:
:Binding:  M-S-<LEFT>
:Subject:  Subtree
:Context:  subtree
:Description: Promote current subtree one level
:Importance: 1
:END:
 - Binding :: M-S-<LEFT>
 - Subject :: Subtree
 - Function :: edit:move
 - Context :: subtree
 - Description :: Promote current subtree one level
 - Importance :: 1
*** org-demote-subtree                                            :edit:move:
:PROPERTIES:
:Binding:  M-S-<RIGHT>
:Subject:  Subtree
:Context:  subtree
:Description: Demote current subtree one level
:Importance: 1
:END:
 - Binding :: M-S-<RIGHT>
 - Subject :: Subtree
 - Function :: edit:move
 - Context :: subtree
 - Description :: Demote current subtree one level
 - Importance :: 1
*** org-move-subtree-up                                                :move:
:PROPERTIES:
:Binding:  M-<UP>
:Subject:  Subtree
:Context:  subtree
:Description: Move subtree up
:Importance: 1
:END:
 - Binding :: M-<UP>
 - Subject :: Subtree
 - Function :: move
 - Context :: subtree
 - Description :: Move subtree up
 - Importance :: 1

I.e., swap with previous subtree of same level
*** org-move-subtree-down                                              :move:
:PROPERTIES:
:Binding:  M-<DOWN>
:Subject:  Subtree
:Context:  subtree
:Description: Move subtree down
:Importance: 1
:END:
 - Binding :: M-<DOWN>
 - Subject :: Subtree
 - Function :: move
 - Context :: subtree
 - Description :: Move subtree down
 - Importance :: 1

I.e., swap with next subtree of same level.
*** org-mark-subtree                                                   :mark:
:PROPERTIES:
:Binding:  C-c @
:Subject:  Subtree
:Context:  subtree
:Description: Mark subtree at point
:Importance: 2
:END:
 - Binding :: C-c @
 - Subject :: Subtree
 - Function :: mark
 - Context :: subtree
 - Description :: Mark subtree at point
 - Importance :: 2

Hitting repeatedly marks subsequent subtrees of the same level as the
marked subtree.
*** org-cut-subtree                                         :delete:remember:
:PROPERTIES:
:Binding:  C-c C-x C-w
:Subject:  Subtree
:Context:  subtree
:Description: Kill subtree
:Importance: 2
:Argument: numeric
:END:
 - Binding :: C-c C-x C-w
 - Subject :: Subtree
 - Function :: delete:remember
 - Context :: subtree
 - Description :: Kill subtree
 - Importance :: 2
 - Argument :: numeric

I.e., remove it from buffer but save in kill ring. With a numeric
prefix argument N, kill N sequential subtrees
*** org-copy-subtree                                               :remember:
:PROPERTIES:
:Binding:  C-c C-x M-w
:Subject:  Subtree
:Context:  subtree
:Description: Copy subtree to kill ring
:Importance: 2
:Argument: numeric
:END:
 - Binding :: C-c C-x M-w
 - Subject :: Subtree
 - Function :: remember
 - Context :: subtree
 - Description :: Copy subtree to kill ring
 - Importance :: 2
 - Argument :: numeric

With a numeric prefix argument N, copy the N sequential subtrees.
*** org-paste-subtree                                                :recall:
:PROPERTIES:
:Binding:  C-c C-x C-y
:Subject:  Subtree
:Context:  subtree
:Description: Yank subtree from kill ring
:Importance: 2
:Argument: numeric
:END:
 - Binding :: C-c C-x C-y
 - Subject :: Subtree
 - Function :: recall
 - Context :: subtree
 - Description :: Yank subtree from kill ring
 - Importance :: 2
 - Argument :: numeric

This does modify the level of the subtree to make sure the tree fits
in nicely at the yank position. The yank level can also be specified
with a numeric prefix argument, or by yanking after a headline marker
like '****'.
*** org-yank                                                         :recall:
:PROPERTIES:
:Binding:  C-y
:Subject:  Subtree
:Context:  org-buffer
:Description: yanks text and can be clever about subtrees
:Importance: 1
:Argument: plain
:END:
 - Binding :: C-y
 - Subject :: Subtree
 - Function :: recall
 - Context :: org-buffer
 - Description :: yanks text and can be clever about subtrees
 - Importance :: 1
 - Argument :: plain

Depending on the variables ~org-yank-adjusted-subtrees~ and
~org-yank-folded-subtrees~, Org's internal ~yank~ command pastes
subtrees folded and in a clever way, using the same command as
~org-paste-subtree~. With the default settings, no level adjustment
takes place, but the yanked tree is folded unless doing so would
swallow text previously visible. Any prefix argument to this command
forces a normal ~yank~ to be executed, with the prefix passed along. A
good way to force a normal yank is ~C-u C-y~. If you use ~yank-pop~
after a yank, it yanks previous kill items plainly, without adjustment
and folding.
*** org-clone-subtree-with-time-shift                            :recall:add:
:PROPERTIES:
:Binding:  C-c C-x c
:Subject:  Subtree
:Context:  subtree
:Description: Clone subtree by making sibling copies
:Importance: 2
:Argument: plain
:END:
 - Binding :: C-c C-x c
 - Subject :: Subtree
 - Function :: recall:add
 - Context :: subtree
 - Description :: Clone subtree by making sibling copies
 - Importance :: 2
 - Argument :: plain

Clone a subtree by making a number of sibling copies of it. You are
prompted for the number of copies to make, and you can also specify if
any timestamps in the entry should be shifted. This can be useful, for
example, to create a number of tasks related to a series of lectures
to prepare. For more details, see the docstring of this command.

To disable timestamp shift, you can call the function with a plain
argument.
*** org-sort                                                      :edit:move:
:PROPERTIES:
:Binding:  C-c ^
:Subject:  Subtree
:Context:  subtree
:Description: Sort immediate children of current headline
:Importance: 2
:Argument: plain
:END:
 - Binding :: C-c ^
 - Subject :: Subtree
 - Function :: edit:move
 - Context :: subtree
 - Description :: Sort immediate children of current headline
 - Importance :: 2
 - Argument :: plain

Sort same-level entries. When there is an active region, all entries
in the region are sorted. Otherwise the children of the current
headline are sorted. The command prompts for the sorting method, which
can be alphabetically, numerically, by time-first timestamp with
active preferred, creation time, scheduled time, deadline time-by
priority, by TODO Keyword-in the sequence the keywords have been
defined in the setup-or by the value of a property. Reverse sorting is
possible as well. You can also supply your own functions to extract
the sorting key. With a plain prefix, sorting is case-sensitive.
*** org-narrow-to-subtree                                             :style:
:PROPERTIES:
:Binding:  C-x n s
:Subject:  Subtree
:Context:  subtree
:Description: Narrow buffer to current subtree
:Importance: 4
:END:
 - Binding :: C-x n s
 - Subject :: Subtree
 - Function :: style
 - Context :: subtree
 - Description :: Narrow buffer to current subtree
 - Importance :: 4
*** org-narrow-to-block                                               :style:
:PROPERTIES:
:Binding:  C-x n b
:Subject:  Block
:Context:  block
:Description: Narrow buffer to current block
:Importance: 5
:END:
 - Binding :: C-x n b
 - Subject :: Block
 - Function :: style
 - Context :: block
 - Description :: Narrow buffer to current block
 - Importance :: 5
*** widen                                                              :stop:
:PROPERTIES:
:Binding:  C-x n w
:Subject:  Narrow
:Context:  narrow
:Description: Widen buffer to remove narrowing
:Importance: 3
:END:
 - Binding :: C-x n w
 - Subject :: Narrow
 - Function :: stop
 - Context :: narrow
 - Description :: Widen buffer to remove narrowing
 - Importance :: 3
*** org-toggle-heading                                           :start:stop:
:PROPERTIES:
:Binding:  C-c *
:Subject:  Headline
:Context:  org-buffer
:Description: Turn normal line into headline or vice versa
:Importance: 2
:END:
 - Binding :: C-c *
 - Subject :: Headline
 - Function :: start:stop
 - Context :: org-buffer
 - Description :: Turn normal line into headline or vice versa
 - Importance :: 2

Turn a normal line or plain list item into a headline-so that it
becomes a subheading at its location. Also turn a headline into a
normal line by removing the stars. If there is an active region, turn
all lines in the region into headlines. If the first line in the
region was an item, turn only the item lines into headlines. Finally,
if the first line is a headline, remove the stars from all headlines
in the region.
*** org-sparse-tree                                                   :start:
:PROPERTIES:
:Binding:  C-c /
:Subject:  Sparse Tree
:Context:  org-buffer
:Description: prompts to select sparse tree command
:Importance: 3
:END:
 - Binding :: C-c /
 - Subject :: Sparse Tree
 - Function :: start
 - Context :: org-buffer
 - Description :: prompts to select sparse tree command
 - Importance :: 3
*** org-occur                                                          :edit:
:PROPERTIES:
:Binding:  C-c / r OR C-c / /
:Subject:  Sparse Tree
:Context:  org-buffer
:Description: sparse tree via regex
:Importance: 3
:Argument: plain
:END:
 - Binding :: C-c / r OR C-c / /
 - Subject :: Sparse Tree
 - Function :: edit
 - Context :: org-buffer
 - Description :: sparse tree via regex
 - Importance :: 3
 - Argument :: plain

Prompts for a regexp and shows a sparse tree with all matches. If the
match is in a headline, the headline is made visible. If the match is
in the body of an entry, headline and body are made visible. In order
to provide minimal context, also the full hierarchy of headlines above
the match is shown, as well as the headline following the match. Each
match is also highlighted; the highlights disappear when the buffer is
changed by an editing command, or by pressing ~C-c C-c~.

When called with a ~C-u~ prefix argument, previous highlights are
kept, so several calls to this command can be stacked.
*** next-error                                                          :nav:
:PROPERTIES:
:Binding:  M-g n OR M-g M-n
:Subject:  Sparse Tree
:Context:  sparse-tree
:Description: Jump to next sparse tree match in this buffer
:Importance: 3
:END:
 - Binding :: M-g n OR M-g M-n
 - Subject :: Sparse Tree
 - Function :: nav
 - Context :: sparse-tree
 - Description :: Jump to next sparse tree match in this buffer
 - Importance :: 3
*** previous-error                                                      :nav:
:PROPERTIES:
:Binding:  M-g p OR M-g M-p
:Subject:  Sparse Tree
:Context:  sparse-tree
:Description: Jump to previous sparse tree match in this buffer
:Importance: 3
:END:
 - Binding :: M-g p OR M-g M-p
 - Subject :: Sparse Tree
 - Function :: nav
 - Context :: sparse-tree
 - Description :: Jump to previous sparse tree match in this buffer
 - Importance :: 3
*** ps-print-buffer-with-faces                                     :remember:
:PROPERTIES:
:Subject:  Sparse Tree
:Context:  sparse-tree
:Description: Generate and print PostScript image of buffer
:Importance: 5
:END:
 - Subject :: Sparse Tree
 - Function :: remember
 - Context :: sparse-tree
 - Description :: Generate and print PostScript image of buffer
 - Importance :: 5
*** org-cycle                                                         :style:
:PROPERTIES:
:Binding:  <TAB>
:Subject:  Plain-List
:Context:  plain-list
:Description: Items can be folded just like headline levels
:Importance: 3
:END:
 - Binding :: <TAB>
 - Subject :: Plain-List
 - Function :: style
 - Context :: plain-list
 - Description :: Items can be folded just like headline levels
 - Importance :: 3

Items can be folded just like headline levels. Normally this works
only if point is on a plain list item. For more details, see the
variable ~org-cycle-include-plain-lists~. In a new item with no text
yet, the first ~<TAB>~ demotes the item to become a child of the
previous one. Subsequent ~<TAB>~'s move the item to meaninful levels
in the list and eventually get it back to its initial position
*** org-insert-heading                                                  :add:
:PROPERTIES:
:Binding:  M-<RET>
:Subject:  Plain-List
:Context:  plain-list
:Description: Insert new item at current level
:Importance: 2
:Argument: plain
:END:
 - Binding :: M-<RET>
 - Subject :: Plain-List
 - Function :: add
 - Context :: plain-list
 - Description :: Insert new item at current level
 - Importance :: 2
 - Argument :: plain

With a prefix argument, force a new heading. If this command is used
in the middle of an item, that item is _split_ in two, and the second
part becomes the new item. If this command is executed _before item's
body_, the new item is created _before_ the current one.
*** org-insert-todo-heading                                             :add:
:PROPERTIES:
:Binding:  M-S-<RET>
:Subject:  Plain-List
:Context:  plain-list
:Description: Insert a new item with a checkbox
:Importance: 3
:END:
 - Binding :: M-S-<RET>
 - Subject :: Plain-List
 - Function :: add
 - Context :: plain-list
 - Description :: Insert a new item with a checkbox
 - Importance :: 3
*** org-previous-item                                                   :nav:
:PROPERTIES:
:Binding:  S-<UP>
:Subject:  Plain-List
:Context:  plain-list
:Description: Move to beginning of previousitem
:Importance: 2
:END:
 - Binding :: S-<UP>
 - Subject :: Plain-List
 - Function :: nav
 - Context :: plain-list
 - Description :: Move to beginning of previousitem
 - Importance :: 2
*** org-next-item                                                       :nav:
:PROPERTIES:
:Binding:  S-<DOWN>
:Subject:  Plain-List
:Context:  plain-list
:Description: Move to beginning of next item
:Importance: 2
:END:
 - Binding :: S-<DOWN>
 - Subject :: Plain-List
 - Function :: nav
 - Context :: plain-list
 - Description :: Move to beginning of next item
 - Importance :: 2
*** org-backward-paragraph                                              :nav:
:PROPERTIES:
:Binding:  C-<UP>
:Subject:  Org-Text
:Context:  org-buffer
:Description: Move backward by a paragraph, or equivalent, unit
:Importance: 3
:Argument: numeric
:END:
 - Binding :: C-<UP>
 - Subject :: Org-Text
 - Function :: nav
 - Context :: org-buffer
 - Description :: Move backward by a paragraph, or equivalent, unit
 - Importance :: 3
 - Argument :: numeric

With argument ARG, do it ARG times;
a negative argument ARG = -N means move forward N paragraphs.

The function moves point between two structural elements (paragraphs,
tables, lists, etc.).

It also provieds the following special moves for convenience:

 - on a table or a property drawer, move to its beginning;
 - on comment, example, export, source and verse blocks, stop at blank
   lines;
 - skip consecutive clocks, diary S-exps, and keywords.
*** org-forward-paragraph                                               :nav:
:PROPERTIES:
:Binding:  C-<DOWN>
:Subject:  org-text
:Context:  org-buffer
:Description: Move forward by a paragraph, or equivalent, unit
:Importance: 3
:Argument: numeric
:END:
 - Binding :: C-<DOWN>
 - Subject :: org-text
 - Function :: nav
 - Context :: org-buffer
 - Description :: Move forward by a paragraph, or equivalent, unit
 - Importance :: 3
 - Argument :: numeric

With an argument ARG, do it ARG times;
a negative argument ARG = -N means move backward N paragraphs

The function moves point between two structural elements (paragraphs,
tables, lists, etc.).

It also provieds the following special moves for convenience:

 - on a table or a property drawer, move to its beginning;
 - on comment, example, export, source and verse blocks, stop at blank
   lines;
 - skip consecutive clocks, diary S-exps, and keywords.
*** org-move-item-up                                                   :move:
:PROPERTIES:
:Binding:  M-<UP>
:Subject:  Plain-List
:Context:  plain-list
:Description: Move item at point up
:Importance: 1
:END:
 - Binding :: M-<UP>
 - Subject :: Plain-List
 - Function :: move
 - Context :: plain-list
 - Description :: Move item at point up
 - Importance :: 1
*** org-move-item-down                                                 :move:
:PROPERTIES:
:Binding:  M-<DOWN>
:Subject:  Plain-List
:Context:  plain-list
:Description: Move item at point down
:Importance: 1
:END:
 - Binding :: M-<DOWN>
 - Subject :: Plain-List
 - Function :: move
 - Context :: plain-list
 - Description :: Move item at point down
 - Importance :: 1
*** org-outdent-item                                                   :move:
:PROPERTIES:
:Binding:  M-<LEFT>
:Subject:  Plain-List
:Context:  plain-list
:Description: Outdent a local list item, but not its children
:Importance: 1
:END:
 - Binding :: M-<LEFT>
 - Subject :: Plain-List
 - Function :: move
 - Context :: plain-list
 - Description :: Outdent a local list item, but not its children
 - Importance :: 1

If a region is active, all items inside will be moved.
*** org-indent-item                                                    :move:
:PROPERTIES:
:Binding:  M-<RIGHT>
:Subject:  Plain-List
:Context:  plain-list
:Description: Indent a local list item, but not its children
:Importance: 1
:END:
 - Binding :: M-<RIGHT>
 - Subject :: Plain-List
 - Function :: move
 - Context :: plain-list
 - Description :: Indent a local list item, but not its children
 - Importance :: 1
*** org-outdent-item-tree                                              :move:
:PROPERTIES:
:Binding:  M-S-<LEFT>
:Subject:  Plain-List
:Context:  plain-list
:Description: Outdent a local list item including its children
:Importance: 1
:END:
 - Binding :: M-S-<LEFT>
 - Subject :: Plain-List
 - Function :: move
 - Context :: plain-list
 - Description :: Outdent a local list item including its children
 - Importance :: 1

If a region is active, all items inside will be moved.

Initially, the item tree is selected based on current
indentation. When these commands are executed several times in direct
succession, the initially selected region is used, even if the new
indentation would imply a different hierarchy. To use the new
hierarcy, break the command chain by moving point.

As a special case, using this command on the very first item of a list
moves the whole list. This behavior can be disabled by configuring
~org-list-automatic-rules~. The global indentation of a list has no
influence on the text _after_ the list.
*** org-indent-item-gree                                               :move:
:PROPERTIES:
:Binding:  M-S-<RIGHT>
:Subject:  Plain-List
:Context:  plain-list
:Description: Indent a local list item including its children
:Importance: 1
:END:
 - Binding :: M-S-<RIGHT>
 - Subject :: Plain-List
 - Function :: move
 - Context :: plain-list
 - Description :: Indent a local list item including its children
 - Importance :: 1

If a region is active, all items inside will be moved.

Initially, the item tree is selected based on current
indentation. When these commands are executed several times in direct
succession, the initially selected region is used, even if the new
indentation would imply a different hierarchy. To use the new
hierarcy, break the command chain by moving point.

As a special case, using this command on the very first item of a list
moves the whole list. This behavior can be disabled by configuring
~org-list-automatic-rules~. The global indentation of a list has no
influence on the text _after_ the list.
*** org-ctrl-c-ctrl-c                                                 :style:
:PROPERTIES:
:Binding:  C-c C-c
:Subject:  Plain-List
:Context:  plain-list
:Description: Verify bullets and indentation consistency
:Importance: 3
:END:
 - Binding :: C-c C-c
 - Subject :: Plain-List
 - Function :: style
 - Context :: plain-list
 - Description :: Verify bullets and indentation consistency
 - Importance :: 3
*** org-cycle-list-bullet                                             :style:
:PROPERTIES:
:Binding:  C-c -
:Subject:  Plain-List
:Context:  plain-list
:Description: Cycle through the different itemize bullets
:Importance: 3
:END:
 - Binding :: C-c -
 - Subject :: Plain-List
 - Function :: style
 - Context :: plain-list
 - Description :: Cycle through the different itemize bullets
 - Importance :: 3
*** org-toggle-heading                                           :add:delete:
:PROPERTIES:
:Binding:  C-c *
:Subject:  Headline
:Context:  not-table
:Description: Convert headings to normal text or vice versa
:Importance: 3
:Argument: plain, numeric
:END:
 - Binding :: C-c *
 - Subject :: Headline
 - Function :: add:delete
 - Context :: not-table
 - Description :: Convert headings to normal text or vice versa
 - Importance :: 3
 - Argument :: plain, numeric

With a plain prefix, convert the whole list at point into heading.

In a region:
 - If the first non blank line is a headline, remove the stars from
   all headlines in the region.
 - If it is a normal line, turn each and every normal line (i.e., not
   an heading or an item) in the region into headings. If you want to
   convert only the first line of this region, use one universal
   prefix argument.
 - If it is a plain list item, turn all plain list items into
   headings.

When converting a line into a heading, the number of stars is chosen
such that the lines become children of the current entry. However,
when a numeric prefix argument is given, its value determines the
number of stars to add.
*** org-list-make-subtree                                               :add:
:PROPERTIES:
:Binding:  C-c C-*
:Subject:  Headline
:Context:  plain-list
:Description: Convert the plain list at point into a subtree
:Importance: 4
:END:
 - Binding :: C-c C-*
 - Subject :: Headline
 - Function :: add
 - Context :: plain-list
 - Description :: Convert the plain list at point into a subtree
 - Importance :: 4
*** org-shiftleft                                                     :style:
:PROPERTIES:
:Binding:  S-<LEFT>
:Subject:  Plain-List
:Context:  plain-list
:Description: Switch entire list to previous bullet type
:Importance: 3
:END:
 - Binding :: S-<LEFT>
 - Subject :: Plain-List
 - Function :: style
 - Context :: plain-list
 - Description :: Switch entire list to previous bullet type
 - Importance :: 3
*** org-shiftright                                                    :style:
:PROPERTIES:
:Binding:  S-<RIGHT>
:Subject:  Plain-List
:Context:  plain-list
:Description: Switch entire list to next bullet type
:Importance: 3
:END:
 - Binding :: S-<RIGHT>
 - Subject :: Plain-List
 - Function :: style
 - Context :: plain-list
 - Description :: Switch entire list to next bullet type
 - Importance :: 3
*** org-sort-list                                                      :edit:
:PROPERTIES:
:Binding:  C-c ^
:Subject:  Plain-List
:Context:  plain-list
:Description: Sort list items
:Importance: 2
:END:
 - Binding :: C-c ^
 - Subject :: Plain-List
 - Function :: edit
 - Context :: plain-list
 - Description :: Sort list items
 - Importance :: 2

The cursor may be at any item of the list that should be
sorted. Sublists are not sorted. Checkboxes, if any, are ignored.

Sorting can be alphabetically numerically, by date/time as given by a
time stamp, by property or by priority.

Comparing entries ignores case by default.

The command prompts for the sorting type.

Sorting is done against the visible part of the headlines, it ignores
hidden links.
* Variables
** Introduction
*** org-insert-mode-line-in-empty-file                           :files:mode:
Non-nil means insert the first line setting Org mode in empty
files. When the function '~org-mode~' is called interactively in an
empty file, this normally means that the file name does not
automatically trigger Org mode. To ensure that the file will always be
in Org mode in the future, a line enforcing Org mode will be inserted
into the buffer, if this option has been set.
** Document Structure
*** org-footnote-section
Outline headline containing footnote definitions. By default
"Footnotes". Avoid using this title for an ordinary headline it will
behave unusually.
*** org-cycle-separator-lines
Positive number: if this many empty lines or more appears from the end
of a subtree and the following headline then exactly 1 empty line will
appear when subtree is collapsed.

Negative number: If this many empty lines or fewer appears from the
end of a subtree and the following headline then every empty line will
appear when the subtree is collapsed.

When 0: never leave empty lines in collapsed view.
*** org-special-ctrl-a/e
Non-nil means 'C-a' and 'C-e' behave specially in headlines and
items.

When t, 'C-a' will bring back the cursor to the beginning of the
headline text, i.e. after the stars and after a possible TODO
keyword. In an item, this will be the position after bullet and
check-box, if any. When the cursor is already at that position,
another 'C-a' will bring it to the beginning of the line.

'C-e' will jump to the end of the headline, ignoring the presence of
tags in the headline. A second 'C-e' will then jump to the true end of
the line, after any tags. This also means that, when this variable is
non-nil, 'C-e' also will never jump behond the end of the headline of a
folded section, i.e. not after the elipses.

When set to the symbol 'reversed', the first 'C-a' or 'C-e' works
normally, going to the true line boundary first. Only a directly
following, identical keypress will bring the cursor to the special
positions.

This may also be a cons cell where the behavior for 'C-a' and 'C-e' is
set separately.
*** org-special-ctrl-k
Non-nil means 'C-k' will behave specially in headlines.
When nil, 'C-k' will call the default 'kill-line' command.
When t, the following will happen while the cursor is in the headline:

 - When at the beginning of a headline, kill the entire subtree.
 - When in the middle of the headline text, kill the text up to the
   tags.
 - When after the headline text and before the tags, kill all the
   tags.
*** org-ctrl-k-protect-subtree
Non-nil means, do not delete a hidden subtree with 'C-k'.
When set to the symbol 'error', simply throw an error when 'C-k' is
used to kill (part-of) a headline that has hidden text behind it.
Any other non-nil value will result in a query to the user, if it is
OK to kill that hidden subtree. When nil, kill without remorse.
*** org-cycle-global-at-bob
When non nil, cycle globally if cursor is at beginning of buffer and
not at a headline.
*** org-startup-folded
When Emacs first visits an Org file, the global state is set to
'showeverything', i.e., all file content is visible. This can be
configured through this variable.
*** org-agenda-inhibit-startup
Inhibit startup when preparing agenda buffers.
When this variable is t, the initialization of the Org agenda buffers
is inhibited: e.g. the visibility state is not set, the tables are not
re-aligned, etc.
*** org-catch-invisible-edits
Check if in invisible region before inserting or deleting a
character.

See documentation for more details.
*** org-goto-auto-isearch
Non-nil means typing characters in ~org-goto~ starts incremental
search. When nil, you can use these keybindings to navigate the
buffer:
 - q :: Quite the Org Goto interface
 - n :: Go to the next visible headline
 - p :: Go to the previous visible headline
 - f :: Go one headline forward on the same level
 - b :: Go one headline backward on the same level
 - u :: Go one headline up
*** org-goto-interface
Allowed values are:

 - outline :: The interface shows an outline of the relevant file and
   the correct headline is found by moving through the outline or by
   searching with incremental search
 - outline-path-completion :: Headlines in the current buffer are
   offered via completion. This is the interface also used by the
   refile command
*** org-treat-insert-todo-heading-as-state-change
Non-nil means inserting a TODO headline is treated as state change. So
when the command ~M-x org-insert-todo-heading~ is used, state change
logging will apply if appropriate. When nil, the new TODO item will be
inserted directly, and no logging will take place.
*** org-yank-adjusted-subtrees
Non-nil means when yanking subtrees, adjust the level. With this
setting, ~org-paste-subtree~ is used to insert the subtree, see this
function for details.
*** org-yank-folded-subtrees
Non-nil means when yanking subtrees, fold them. If the kill is a
single subtree, or a sequal of subtrees, i.e. if it starts with a
heading and all other headings in it are either children or siblings,
then fold all the subtrees. However, do this only if no text after the
yank would be swallowed into a folded tree by this action.
*** org-agenda-custom-commands
For frequently used sparse trees of specific search strings, you can
use this variable to define fast keyboard access to specific sparse
trees. These commands will then be accessible through the agenda
dispatcher. For example:

#+BEGIN_SRC elisp
  (setq org-atenda-custom-commands
	'(("f" occur-tree "FIXME")))
#+END_SRC

defines the key 'f' as a shortcut for creating a sparse tree matching
the string 'FIXME'.
*** org-show-context-detail
Alist between context and visibility span when revealing a
location. Some actions may move point into invisible locations. As a
consequence, Org always exposes a neighborhood around point. How much
is shown depends on the initial action, or context. Valid contexts
are:

 - agenda :: when exposing an entry from the agenda
 - org-goto :: when using the command ~org-goto~ (~C-c C-j~)
 - occur-tree :: when using the command ~org-occur~ (~C-c / /~)
 - tags-tree :: when constructing a sparse tree based on tags matches
 - link-search :: when exposing search matches associated with a link
 - mark-goto :: when exposing the jump goal of a mark
 - bookmark-jump :: when exposing a bookmark location
 - isearch :: when exiting from an incremental search
 - default :: default for all contexts not set explicitly

Allowed visibility spans are:

 - minimal :: show current headline; if point is not on headline, also
   show entry
 - local :: show current headline, entry and next headline
 - ancesotrs :: show current headline and its direct ancestors; if
   point is not on headline, also show entry
 - ancestors-full :: show current subtree and its direct ancestors
 - lineage :: show current headline, its direct ancestors and all
   their children; if point is not on headline, also show entry and
   first child
 - tree :: show current headline, its direct ancestors and all their
   children; if point is not on headline, also show entry and all
   children
 - canonical :: show current headline, its direct ancestors along with
   their entries and children; if point is not located on the
   headline, also show current entry and all children

As special cases, a nil or t value means show all contexts in minimal
or canonical view, respectively.

Some views can make displayed information very compact, but also make
it harder to edit the location of the match. In such a case use the
command ~org-reveal~ (~C-c C-r~) to show more context
*** org-remove-highlights-with-change
Non-nil means any change to the buffer will remove temporary
highlights. Such highlights are created by ~org-occur~ and
~org-clock-display~. When nil, ~C-c C-c~ needs to be used to get rid
of the highlights. The highlights created by ~org-latex-preview~
always need ~C-c C-s C-l~ to be removed.
*** org-list-demote-modify-bullet
Default bullet type installed when demoting an item. This is an
association list, for each bullet type, this alist will point to the
bullet that should be used when this item is demoted.
*** org-list-indent-offset
Additional indentation for sub-items in a list. By setting this to a
small number, usually 1 or 2, one can more clearly distinguish
sub-items in a list.
*** org-list-automatic-rules
Non-nil means apply set of ules when acting on lists.

By default, automatic actions are taken when using
 - ~M-RET~
 - ~<M-right>~
 - ~<M-left>~
 - ~<M-S-right>~
 - ~<M-S-left>~
 - ~C-c -~
 - ~C-c C-x C-b~
 - ~<M-S-return>~

You can disable individually these rules by setting them to nil.

Valid rules are:
 - checkbox :: When non-nil, checkbox statistics is updated each time
   you either insert a new checkbox or toggle a checkbox.
 - indent :: when non-nil, indenting or outdenting list top-item with
   its subtree will move the whole list and outdenting a list whose
   bullet is * to column 0 will change that bullet to "-".
*** org-cycle-include-plain-lists
When t, make TAB cycle visibility on plain list items. Cycling plain
lists works only when the cursor is on a plain list item. When the
cursor is on an outline heading, plain lists are treated as text. This
is the most stable way of handling this, which is why it is the
default.

When this is the symbol 'integrate', then integrate plain list items
when cycling, as if they were children of outlin headings.

This setting can lead to strange effects when switching visibility to
'children', because the first "child" in a subtree decides what
children should be listed. If that first "child" is a plain list item
with an implied large level number, all true children and grand
children of the outline heading will be exposed in a children' view.
*** org-list-use-circular-motion
Non-nil means commands implying motion in lists should be cyclic.

In that case, the item following the last item is the first one, and
the item preceding the first item is the last one.

This affects the behavior of
 - ~org-move-item-up~
 - ~org-move-item-down~
 - ~org-next-item~
 - ~org-previous-item~
*** org-support-shift-select
Non-nil means make shift-cursor commands select text when possible.

In Emacs 23, when ~shift-select-mode~ is on, shifted cursor keys start
selecting a region, or enlarge regions started in this way. In Org
mode, in special contexts, these same keys are used for other
purposes, important enough to compete with shift selection. Org tries
to balance these needs by supporting ~shift-select-mode~ outside these
special contests, under control of this variable.

The default of this variable is nil, to avoid confusing
behavior. Shifted cursor keys will then execute Org commands in the
following contexts:
- on a headline, changing TODO state (left/right) and priority
  (up/down)
- on a time stamp, changing the time
- in a plain list item, changing the bullet type
- in a property definition line, switching between allowed values
- in the BEGIN line of a click table (changing the time block)
- in a table, moving the cell in the specified direction
Outside these contests, the command will throw an error.

When this variable is t and the cursor is not in a special context,
Org mode will support shift-selection for making and enlarging
regions. To make this more effective, the bullet cycling will no
longer happen anywhere in an item line, but only if the cursor is
exactly on the bullet.

If you set this variable to the symbol 'always', then the keyws will
not be special in headlines, property lines, item lines, and table
cells, to make shift selection work there as well. If this is what you
want, you can use the following alternate commands:
- ~C-c C-t~ and ~C-c ,~ to change TODO state and priority
- ~C-u C-u C-c C-t~ can be used to switch TODO sets
- ~C-c -~ to cycle item bullet types
and properties can be edited by hand or in column view.

However, when the cursor is on a timestamp, shift-cursor commands will
still edit the time stamp - this is just too good to give up.
*** org-plain-list-ordered-item-terminator
The character that makes a line with leading number an ordered list
item. Valid values are ?. and ?\). To get both terminators, use t.
*** org-list-allow-alphabetical
Non-nil means single character alphabetical bullets are allowed.

Both uppercase and lowercase are handled. Lists with more than 26
items will fallback to standard numbering. Alphabetical counters like
"[@c]" will be recognized.

This variable needs to be set before org.el is loaded. If you need to
make a change while Emacs is running, use the customize interface or
run the following code after updating it:

~M-x org-element-update-syntax~
*** org-M-RET-may-split-line
Non-nil means M-RET will split the line at the cursor position. When
nil, it will go to the end of the line before making a new line. You
may also set this option in a different way for different
contests. Valid contexts are:

 - headline :: when creating a new headline
 - item :: when creating a new item
 - table :: in a table field
 - default :: the value to be used for all contexts not explicitly
   customized
* Properties
** Document Structure
*** VISIBILITY
Any headline with this property get's their visibility adapted
accordingly. Allowed values for this property are:
 - folded
 - children
 - content
 - all
* Faces
* .emacs Additions
** Introduction
*** Basics
For a better experience, the three Org commands ~org-store-link~,
~org-capture~ and ~org-agenda~ ought to be accessible anywhere in
Emacs, not just in Org buffers. To that effect, you need to bind them
to globally available keys, like the ones reserved for users. Here are
suggested bindings, please modify the keys to your own liking.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

*** Font Lock
If you do not use Font Lock globally turn it on in Org buffer with

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook #'turn-on-font-lock)
#+END_SRC

* Other .el Suggestions
** Introduction
*** minimal-org.el
#+BEGIN_SRC elisp
  ;;; Minimal setup to load latest `org-mode'.

  ;; Activate debugging.  (setq debug-on-error t debug-on-signal nil
  debug-on-quit nil)

  ;; Add latest Org mode to load path.  (add-to-list 'load-path
  (expand-file-name "/path/to/org-mode/lisp"))
#+END_SRC

* Command Properties
* Command Line Suggestions
** Introduction
*** Minimal Emacs session
Suggested bash command to open emacs with as few bells and wistles as
possible. Ensure that the problem is actually with org-mode and not
just with your Emacs setup.
#+BEGIN_SRC bash
emacs -Q -l /path/to/minimal-org.el
#+END_SRC

* Niche Modes
* Notes
* Practice
** Document Structure
*** Plain List
 * test
   + hello
     - Cool
     - nice
       + Yeah
     - Whoa
   + Yeah
 * again
 * Again
* Extra

